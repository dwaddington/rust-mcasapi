/* automatically generated by rust-bindgen 0.59.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const __iovec_defined: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type ssize_t = __ssize_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
pub type mcas_session_t = *mut ::std::os::raw::c_void;
pub type mcas_memory_handle_t = *mut ::std::os::raw::c_void;
pub type status_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcas_async_handle_t {
    pub internal: *mut ::std::os::raw::c_void,
    pub response_data: *mut ::std::os::raw::c_void,
}
pub type mcas_flags_t = u32;
pub type offset_t = u64;
pub type byte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layer_response_t {
    pub ptr: *mut ::std::os::raw::c_void,
    pub len: size_t,
    pub layer_id: u32,
}
pub type mcas_response_array_t = *mut layer_response_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcas_pool_t {
    pub session: mcas_session_t,
    pub handle: u64,
}
pub type mcas_ado_flags_t = u32;
pub type addr_t = u64;
pub const FLAGS_NONE: mcas_flags_t = 0;
pub const FLAGS_READ_ONLY: mcas_flags_t = 1;
pub const FLAGS_SET_SIZE: mcas_flags_t = 2;
pub const FLAGS_CREATE_ONLY: mcas_flags_t = 4;
pub const FLAGS_DONT_STOMP: mcas_flags_t = 8;
pub const FLAGS_NO_RESIZE: mcas_flags_t = 16;
pub const FLAGS_MAX_VALUE: mcas_flags_t = 16;
extern "C" {
    pub static MEMORY_HANDLE_NONE: mcas_memory_handle_t;
}
pub const ADO_FLAG_NONE: mcas_ado_flags_t = 0;
pub const ADO_FLAG_ASYNC: mcas_ado_flags_t = 1;
pub const ADO_FLAG_CREATE_ON_DEMAND: mcas_ado_flags_t = 2;
pub const ADO_FLAG_CREATE_ONLY: mcas_ado_flags_t = 4;
pub const ADO_FLAG_NO_OVERWRITE: mcas_ado_flags_t = 8;
pub const ADO_FLAG_DETACHED: mcas_ado_flags_t = 16;
pub const ADO_FLAG_READ_ONLY: mcas_ado_flags_t = 32;
pub const ADO_FLAG_ZERO_NEW_VALUE: mcas_ado_flags_t = 64;
pub const mcas_attribute_ATTR_VALUE_LEN: mcas_attribute = 1;
pub const mcas_attribute_ATTR_COUNT: mcas_attribute = 2;
pub const mcas_attribute_ATTR_CRC32: mcas_attribute = 3;
pub const mcas_attribute_ATTR_AUTO_HASHTABLE_EXPANSION: mcas_attribute = 4;
pub const mcas_attribute_ATTR_PERCENT_USED: mcas_attribute = 5;
pub const mcas_attribute_ATTR_WRITE_EPOCH_TIME: mcas_attribute = 6;
pub const mcas_attribute_ATTR_MEMORY_TYPE: mcas_attribute = 7;
pub type mcas_attribute = ::std::os::raw::c_uint;
pub const MEMORY_TYPE_DRAM: ::std::os::raw::c_uint = 1;
pub const MEMORY_TYPE_PMEM_DEVDAX: ::std::os::raw::c_uint = 2;
pub const MEMORY_TYPE_UNKNOWN: ::std::os::raw::c_uint = 255;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Open session to MCAS endpoint"]
    #[doc = ""]
    #[doc = " @param server_addr Address of endpoint (e.g., 10.0.0.101::11911)"]
    #[doc = " @param net_device Network device (e.g., mlx5_0, eth0)"]
    #[doc = " @param debug_level Debug level (0=off)"]
    #[doc = " @param patience Timeout patience in seconds (default 30)"]
    #[doc = ""]
    #[doc = " @return Handle to mcas session"]
    pub fn mcas_open_session_ex(
        server_addr: *const ::std::os::raw::c_char,
        net_device: *const ::std::os::raw::c_char,
        debug_level: ::std::os::raw::c_uint,
        patience: ::std::os::raw::c_uint,
        out_session: *mut mcas_session_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Close session"]
    #[doc = ""]
    #[doc = " @param session Handle returned by mcas_open_session"]
    #[doc = ""]
    #[doc = " @return 0 on success, -1 on error"]
    pub fn mcas_close_session(session: mcas_session_t) -> status_t;
}
extern "C" {
    #[doc = " Allocate 64B aligned memory for use in direct calls"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param size Size to allocate in bytes"]
    #[doc = " @param out_ptr [out] Pointer to allocation"]
    #[doc = " @param out_handle [out] Memory handle"]
    #[doc = ""]
    #[doc = " @return S_OK or int from ::posix_memalign"]
    pub fn mcas_allocate_direct_memory(
        session: mcas_session_t,
        size: size_t,
        out_ptr: *mut *mut ::std::os::raw::c_void,
        out_handle: *mut *mut ::std::os::raw::c_void,
    ) -> status_t;
}
extern "C" {
    #[doc = " Free direct memory"]
    #[doc = ""]
    #[doc = " @param ptr"]
    pub fn mcas_free_direct_memory(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Create a new pool"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param pool_name Unique pool name"]
    #[doc = " @param size Size of pool in bytes (for keys,values and metadata)"]
    #[doc = " @param flags Creation flags"]
    #[doc = " @param expected_obj_count Expected maximum object count (optimization)"]
    #[doc = " @param base Optional base address"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_create_pool_ex(
        session: mcas_session_t,
        pool_name: *const ::std::os::raw::c_char,
        size: size_t,
        flags: mcas_flags_t,
        expected_obj_count: u64,
        base_addr: addr_t,
        out_pool_handle: *mut mcas_pool_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_create_pool(
        session: mcas_session_t,
        pool_name: *const ::std::os::raw::c_char,
        size: size_t,
        flags: mcas_flags_t,
        out_pool_handle: *mut mcas_pool_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Open existing pool"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param pool_name Pool name"]
    #[doc = " @param flags Optional flags"]
    #[doc = " @param base_addr Optional base address"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_open_pool_ex(
        session: mcas_session_t,
        pool_name: *const ::std::os::raw::c_char,
        flags: mcas_flags_t,
        base_addr: addr_t,
        out_pool_handle: *mut mcas_pool_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_open_pool(
        session: mcas_session_t,
        pool_name: *const ::std::os::raw::c_char,
        flags: mcas_flags_t,
        out_pool_handle: *mut mcas_pool_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Close a pool"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_close_pool(pool: mcas_pool_t) -> status_t;
}
extern "C" {
    #[doc = " Delete pool"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param pool_name Pool name (pool should be closed)"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_delete_pool(
        session: mcas_session_t,
        pool_name: *const ::std::os::raw::c_char,
    ) -> status_t;
}
extern "C" {
    #[doc = " Close and delete pool"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_close_delete_pool(pool: mcas_pool_t) -> status_t;
}
extern "C" {
    #[doc = " Set configuration (e.g., AddIndex::VolatileTree)"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param setting Configuring string"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_configure_pool(
        pool: mcas_pool_t,
        setting: *const ::std::os::raw::c_char,
    ) -> status_t;
}
extern "C" {
    #[doc = " Basic put operation"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key"]
    #[doc = " @param value"]
    #[doc = " @param value_len"]
    #[doc = " @param flags"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_put_ex(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: size_t,
        flags: ::std::os::raw::c_uint,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_put(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> status_t;
}
extern "C" {
    #[doc = " Register memory for direct transfer operations"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param addr Start address"]
    #[doc = " @param len Size of region in bytes"]
    #[doc = " @param out_handle Memory handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_register_direct_memory(
        session: mcas_session_t,
        addr: *const ::std::os::raw::c_void,
        len: size_t,
        out_handle: *mut mcas_memory_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Unregister memory from direct transfer"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param handle Handle from register_direct_memory call"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_unregister_direct_memory(
        session: mcas_session_t,
        handle: mcas_memory_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Zero-copy put"]
    #[doc = ""]
    #[doc = " @param pool Handle to pool"]
    #[doc = " @param key Key"]
    #[doc = " @param value Value pointer"]
    #[doc = " @param value_len Value length"]
    #[doc = " @param handle Optional handle (0 for none)"]
    #[doc = " @param flags Optional flags"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_put_direct_ex(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: size_t,
        handle: mcas_memory_handle_t,
        flags: ::std::os::raw::c_uint,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_put_direct(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Asynchronous put operation"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key"]
    #[doc = " @param value Value ptr"]
    #[doc = " @param value_len Value len"]
    #[doc = " @param flags Optional flags"]
    #[doc = " @param out_async_handle Out async handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_async_put_ex(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: size_t,
        flags: ::std::os::raw::c_uint,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_async_put(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Asynchronous zero-copy put"]
    #[doc = ""]
    #[doc = " @param pool Handle to pool"]
    #[doc = " @param key Key"]
    #[doc = " @param value Value pointer"]
    #[doc = " @param value_len Value length"]
    #[doc = " @param handle Optional handle (0 for none)"]
    #[doc = " @param flags Optional flags"]
    #[doc = " @param out_async_handle Out async handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_async_put_direct_ex(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: size_t,
        handle: mcas_memory_handle_t,
        flags: ::std::os::raw::c_uint,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Basic get operation"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key name"]
    #[doc = " @param out_value Out value data (release with mcas_free_memory)"]
    #[doc = " @param out_value_len Out value length"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_get(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        out_value: *mut *mut ::std::os::raw::c_void,
        out_value_len: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Zero-copy transfer get operation"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key"]
    #[doc = " @param value Pointer to target buffer"]
    #[doc = " @param inout_size_value Size of target buffer, then size of transfer"]
    #[doc = " @param handle Handle to direct registered memory"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_get_direct_ex(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        inout_size_value: *mut size_t,
        handle: mcas_memory_handle_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_get_direct(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        inout_size_value: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Asynchronous zero-copy transfer get operation"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key"]
    #[doc = " @param out_value Pointer to target buffer"]
    #[doc = " @param inout_size_value Size of target buffer, then size of transfer"]
    #[doc = " @param handle Handle to direct registered memory"]
    #[doc = " @param out_async_handle Out async handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_async_get_direct_ex(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        out_value: *mut ::std::os::raw::c_void,
        inout_size_value: *mut size_t,
        handle: mcas_memory_handle_t,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_async_get_direct(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        out_value: *mut ::std::os::raw::c_void,
        inout_size_value: *mut size_t,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Get direct sub-region of value space memory"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param offset Offset in value space"]
    #[doc = " @param out_buffer Destination buffer"]
    #[doc = " @param inout_size Size of destination buffer/size to copy, then size transferred"]
    #[doc = " @param handle Memory handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_get_direct_offset_ex(
        pool: mcas_pool_t,
        offset: offset_t,
        out_buffer: *mut ::std::os::raw::c_void,
        inout_size: *mut size_t,
        handle: mcas_memory_handle_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_get_direct_offset(
        pool: mcas_pool_t,
        offset: offset_t,
        out_buffer: *mut ::std::os::raw::c_void,
        inout_size: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Asynchronous version of mcas_get_direct_offset_ex"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param offset Offset in value space"]
    #[doc = " @param out_buffer Destination buffer"]
    #[doc = " @param inout_size Size of destination buffer/size to copy, then size transferred"]
    #[doc = " @param handle Memory handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_async_get_direct_offset_ex(
        pool: mcas_pool_t,
        offset: offset_t,
        out_buffer: *mut ::std::os::raw::c_void,
        inout_size: *mut size_t,
        handle: mcas_memory_handle_t,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_async_get_direct_offset(
        pool: mcas_pool_t,
        offset: offset_t,
        out_buffer: *mut ::std::os::raw::c_void,
        inout_size: *mut size_t,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Put direct sub-region of value space memory"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param offset Offset in value space"]
    #[doc = " @param out_buffer Destination buffer"]
    #[doc = " @param inout_size Size of destination buffer/size to copy, then size transferred"]
    #[doc = " @param handle Memory handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_put_direct_offset_ex(
        pool: mcas_pool_t,
        offset: offset_t,
        buffer: *const ::std::os::raw::c_void,
        inout_size: *mut size_t,
        handle: mcas_memory_handle_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_put_direct_offset(
        pool: mcas_pool_t,
        offset: offset_t,
        buffer: *const ::std::os::raw::c_void,
        inout_size: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Asynchronous version of mcas_put_direct_offset_ex"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param offset Offset in value space"]
    #[doc = " @param out_buffer Destination buffer"]
    #[doc = " @param inout_size Size of destination buffer/size to copy, then size transferred"]
    #[doc = " @param handle Memory handle"]
    #[doc = " @param mcas_async_handle_t Out asynchronous handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_async_put_direct_offset_ex(
        pool: mcas_pool_t,
        offset: offset_t,
        buffer: *const ::std::os::raw::c_void,
        inout_size: *mut size_t,
        handle: mcas_memory_handle_t,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    pub fn mcas_async_put_direct_offset(
        pool: mcas_pool_t,
        offset: offset_t,
        buffer: *const ::std::os::raw::c_void,
        inout_size: *mut size_t,
        out_async_handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Check for completion of asynchronous task"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param handle Async work handle"]
    #[doc = ""]
    #[doc = " @return 0 on completion or < 0 on still waiting (E_BUSY=-9)"]
    pub fn mcas_check_async_completion(
        session: mcas_session_t,
        handle: mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Find a key using secondary index"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key_expression Expression for key (e.g., \"prefix:carKey\")"]
    #[doc = " @param offset Offset from which to search"]
    #[doc = " @param out_matched_offset Out offset of last match"]
    #[doc = " @param out_matched_key Copy of key matched; free with POSIX free() call"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_find(
        pool: mcas_pool_t,
        key_expression: *const ::std::os::raw::c_char,
        offset: offset_t,
        out_matched_offset: *mut offset_t,
        out_matched_key: *mut *mut ::std::os::raw::c_char,
    ) -> status_t;
}
extern "C" {
    #[doc = " Erase key-value pair from pool"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_erase(pool: mcas_pool_t, key: *const ::std::os::raw::c_char) -> status_t;
}
extern "C" {
    #[doc = " Asynchronous erase key-value pair from pool"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key"]
    #[doc = " @param handle Out asynchronous task handle"]
    #[doc = ""]
    #[doc = " @return"]
    pub fn mcas_async_erase(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Free memory returned by get operations"]
    #[doc = ""]
    #[doc = " @param session Session handle"]
    #[doc = " @param p Pointer to region to free"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_free_memory(session: mcas_session_t, p: *mut ::std::os::raw::c_void) -> status_t;
}
extern "C" {
    #[doc = " Return number of objects in the pool"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = ""]
    #[doc = " @return Number of objects in the pool"]
    pub fn mcas_count(pool: mcas_pool_t) -> size_t;
}
extern "C" {
    #[doc = " Get attribute for key or pool (see enum Attribute)"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Optional key (use NULL if not needed)"]
    #[doc = " @param attr Attribute to retrieve"]
    #[doc = " @param out_value Array of attribute values. Free with POSIX 'free'"]
    #[doc = " @param out_value_count Size of array of out values"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_get_attribute(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        attr: mcas_attribute,
        out_value: *mut *mut u64,
        out_value_count: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Free response vector data"]
    #[doc = ""]
    #[doc = " @param out_response_vector Response array"]
    pub fn mcas_free_responses(out_response_vector: mcas_response_array_t);
}
extern "C" {
    #[doc = " Used to invoke an operation on an active data object (see mcas_itf.h)"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key. Note, if key is empty, the work request is key-less."]
    #[doc = " @param request Request data"]
    #[doc = " @param request_len Length of request data in bytes"]
    #[doc = " @param flags Flags for invocation (see ADO_FLAG_CREATE_ONLY, ADO_FLAG_READ_ONLY)"]
    #[doc = " @param value_size Optional parameter to define value size to create for"]
    #[doc = " @param out_response_vector Responses from invocation as an array of iovec"]
    #[doc = " @param out_response_vector_count Number of iovecs in result"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_invoke_ado(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        request: *const ::std::os::raw::c_void,
        request_len: size_t,
        flags: mcas_ado_flags_t,
        value_size: size_t,
        out_response_vector: *mut mcas_response_array_t,
        out_response_vector_count: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Asynchonously used to invoke an operation on an active data object (see mcas_itf.h)"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key. Note, if key is empty, the work request is key-less."]
    #[doc = " @param request Request data"]
    #[doc = " @param request_len Length of request data in bytes"]
    #[doc = " @param flags Flags for invocation (see ADO_FLAG_CREATE_ONLY, ADO_FLAG_READ_ONLY)"]
    #[doc = " @param value_size Optional parameter to define value size to create for"]
    #[doc = " @param handle Out asynchronous task handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_async_invoke_ado(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        request: *const ::std::os::raw::c_void,
        request_len: size_t,
        flags: mcas_ado_flags_t,
        value_size: size_t,
        handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Check for mcas_async_invoke_ado result"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param handle Handle from mcas_async_invoke_ado"]
    #[doc = " @param out_response_vector Out pointer to array of iovec"]
    #[doc = " @param out_response_vector_count Out number of elements in vector"]
    #[doc = ""]
    #[doc = " @return 0 on completion; response that is freed with 'mcas_free_responses'"]
    pub fn mcas_check_async_invoke_ado(
        pool: mcas_pool_t,
        handle: mcas_async_handle_t,
        out_response_vector: *mut mcas_response_array_t,
        out_response_vector_count: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Put a value then invoke an operation on an active data"]
    #[doc = " object (see mcas_itf.h)"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key. Note, if key is empty, the work request is key-less."]
    #[doc = " @param request Request data"]
    #[doc = " @param request_len Length of request data in bytes"]
    #[doc = " @param value Value data"]
    #[doc = " @param value_len Length of value data in bytes"]
    #[doc = " @param root_len Length to allocate for root value (with ADO_FLAG_DETACHED)"]
    #[doc = " @param flags Flags for invocation (see ADO_FLAG_CREATE_ONLY, ADO_FLAG_READ_ONLY)"]
    #[doc = " @param out_response_vector Responses from invocation as an array of iovec"]
    #[doc = " @param out_response_vector_count Number of iovecs in result"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_invoke_put_ado(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        request: *const ::std::os::raw::c_void,
        request_len: size_t,
        value: *const ::std::os::raw::c_void,
        value_len: size_t,
        root_len: size_t,
        flags: mcas_ado_flags_t,
        out_response_vector: *mut mcas_response_array_t,
        out_response_vector_count: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Asynchonously put a value then invoke an operation on an"]
    #[doc = " active data object (see mcas_itf.h)"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param key Key. Note, if key is empty, the work request is key-less."]
    #[doc = " @param request Request data"]
    #[doc = " @param request_len Length of request data in bytes"]
    #[doc = " @param value Value data"]
    #[doc = " @param value_len Length of value data in bytes"]
    #[doc = " @param flags Flags for invocation (see ADO_FLAG_CREATE_ONLY, ADO_FLAG_READ_ONLY)"]
    #[doc = " @param handle Out asynchronous task handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, < 0 on failure"]
    pub fn mcas_async_invoke_put_ado(
        pool: mcas_pool_t,
        key: *const ::std::os::raw::c_char,
        request: *const ::std::os::raw::c_void,
        request_len: size_t,
        value: *const ::std::os::raw::c_void,
        value_len: size_t,
        root_len: size_t,
        flags: mcas_ado_flags_t,
        handle: *mut mcas_async_handle_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Check for mcas_async_invoke_put_ado result"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param handle Handle from mcas_async_invoke_put_ado"]
    #[doc = " @param out_response_vector Out pointer to array of iovec"]
    #[doc = " @param out_response_vector_count Out number of elements in vector"]
    #[doc = ""]
    #[doc = " @return 0 on completion; response that is freed with 'mcas_free_responses'"]
    pub fn mcas_check_async_invoke_put_ado(
        pool: mcas_pool_t,
        handle: mcas_async_handle_t,
        out_response_vector: *mut mcas_response_array_t,
        out_response_vector_count: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Free response from invoke_ado or invoke_put_ado"]
    #[doc = ""]
    #[doc = " @param out_response_vector Response vector"]
    #[doc = " @param out_response_vector_count Num elements in response vector"]
    #[doc = ""]
    #[doc = " @return 0 on success"]
    pub fn mcas_free_response(
        out_response_vector: mcas_response_array_t,
        out_response_vector_count: size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Helper to index into response array"]
    #[doc = ""]
    #[doc = " @param response_vector Response vector"]
    #[doc = " @param index Index of requested response"]
    #[doc = " @param out_ptr [out] Pointer to response buffer"]
    #[doc = " @param out_len [out] Size of response buffer"]
    #[doc = ""]
    #[doc = " @return 0 on success"]
    pub fn mcas_get_response(
        response_vector: mcas_response_array_t,
        index: size_t,
        out_ptr: *mut *mut ::std::os::raw::c_void,
        out_len: *mut size_t,
    ) -> status_t;
}
extern "C" {
    #[doc = " Debug operation"]
    #[doc = ""]
    #[doc = " @param pool Pool handle"]
    #[doc = " @param cmd Debug command"]
    #[doc = " @param arg Argument"]
    pub fn mcas_debug(pool: mcas_pool_t, cmd: ::std::os::raw::c_uint, arg: u64);
}
